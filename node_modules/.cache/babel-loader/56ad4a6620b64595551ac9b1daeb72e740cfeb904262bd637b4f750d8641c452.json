{"ast":null,"code":"var _jsxFileName = \"/Users/abdulazim/Documents/web_stuff/real-projects/toshmi-admin/src/hooks/useAuth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport ApiService from '../services/api';\nimport { STORAGE_KEYS } from '../utils/constants';\n\n// Create Auth Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use auth context\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Helper function to extract error message\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst getErrorMessage = error => {\n  if (typeof error === 'string') return error;\n  if (error !== null && error !== void 0 && error.message) return error.message;\n  if (error !== null && error !== void 0 && error.detail) return error.detail;\n  if (error !== null && error !== void 0 && error.error) return error.error;\n  if (typeof error === 'object') {\n    return 'Kutilmagan xatolik yuz berdi';\n  }\n  return 'Noma\\'lum xatolik';\n};\n\n// Auth Provider Component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Initialize authentication on app start\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const token = localStorage.getItem(STORAGE_KEYS.AUTH_TOKEN);\n        const storedUser = localStorage.getItem(STORAGE_KEYS.USER_DATA);\n        if (token && storedUser) {\n          try {\n            // Parse stored user\n            const userData = JSON.parse(storedUser);\n            setUser(userData);\n\n            // If it's a mock token, just use stored data\n            if (token === 'mock-jwt-token') {\n              return;\n            }\n\n            // Otherwise verify token is still valid by fetching fresh profile\n            const profile = await ApiService.getProfile();\n            setUser(profile);\n            localStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(profile));\n          } catch (error) {\n            console.error('Token verification failed:', error);\n            // Token is invalid, clear auth\n            clearAuth();\n          }\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        clearAuth();\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n\n  // Login function\n  const login = async credentials => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Format credentials for API\n      const loginData = {\n        phone: credentials.phone || credentials.username,\n        password: credentials.password\n      };\n      console.log('Attempting login with:', {\n        phone: loginData.phone\n      });\n\n      // Try real API login first\n      try {\n        const response = await ApiService.login(loginData);\n        if (response && response.access_token && response.user) {\n          const {\n            access_token: token,\n            user: userData\n          } = response;\n\n          // Validate user is admin\n          if (userData.role !== 'admin') {\n            throw new Error('Faqat admin foydalanuvchilari tizimga kira oladi');\n          }\n\n          // Store auth data\n          localStorage.setItem(STORAGE_KEYS.AUTH_TOKEN, token);\n          localStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(userData));\n          setUser(userData);\n          return {\n            success: true,\n            user: userData\n          };\n        } else {\n          throw new Error('Serverdan noto\\'g\\'ri javob olindi');\n        }\n      } catch (apiError) {\n        console.log('API login failed, trying mock login:', apiError);\n\n        // Fallback to mock login for testing\n        if (loginData.phone === '+998990330919' || loginData.phone === '998990330919' || loginData.phone === '990330919') {\n          if (credentials.password === 'admin123') {\n            // Mock successful login for testing\n            const mockUser = {\n              id: 1,\n              phone: '+998990330919',\n              role: 'admin',\n              first_name: 'Administrator',\n              last_name: 'System',\n              is_active: true,\n              created_at: new Date().toISOString()\n            };\n\n            // Store mock auth data\n            localStorage.setItem(STORAGE_KEYS.AUTH_TOKEN, 'mock-jwt-token');\n            localStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(mockUser));\n            setUser(mockUser);\n            return {\n              success: true,\n              user: mockUser\n            };\n          } else {\n            throw new Error('Noto\\'g\\'ri parol. Test uchun: admin123');\n          }\n        }\n\n        // If mock also fails, throw original API error\n        throw apiError;\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      let errorMessage = getErrorMessage(error);\n\n      // Handle specific error cases\n      if (errorMessage.includes('401') || errorMessage.includes('Unauthorized')) {\n        errorMessage = 'Noto\\'g\\'ri telefon raqami yoki parol';\n      } else if (errorMessage.includes('403') || errorMessage.includes('Forbidden')) {\n        errorMessage = 'Sizga tizimga kirish huquqi berilmagan';\n      } else if (errorMessage.includes('404') || errorMessage.includes('Not Found')) {\n        errorMessage = 'Foydalanuvchi topilmadi';\n      } else if (errorMessage.includes('Network') || errorMessage.includes('fetch')) {\n        errorMessage = 'Serverga ulanishda xatolik. Internet aloqangizni tekshiring';\n      } else if (errorMessage.includes('500') || errorMessage.includes('Internal Server Error')) {\n        errorMessage = 'Server xatoligi yuz berdi. Keyinroq qayta urinib ko\\'ring';\n      }\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    clearAuth();\n    window.location.href = '/login';\n  };\n\n  // Clear authentication data\n  const clearAuth = () => {\n    localStorage.removeItem(STORAGE_KEYS.AUTH_TOKEN);\n    localStorage.removeItem(STORAGE_KEYS.USER_DATA);\n    setUser(null);\n    setError(null);\n  };\n\n  // Update profile\n  const updateProfile = async profileData => {\n    try {\n      const updatedUser = await ApiService.updateProfile(profileData);\n      setUser(updatedUser);\n      localStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(updatedUser));\n      return {\n        success: true,\n        user: updatedUser\n      };\n    } catch (error) {\n      console.error('Profile update error:', error);\n      const errorMessage = getErrorMessage(error);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Change password\n  const changePassword = async passwordData => {\n    try {\n      await ApiService.changePassword(passwordData);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Password change error:', error);\n      const errorMessage = getErrorMessage(error);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Check if user is authenticated\n  const isAuthenticated = () => {\n    return !!user && !!localStorage.getItem(STORAGE_KEYS.AUTH_TOKEN);\n  };\n\n  // Check if user is admin\n  const isAdmin = () => {\n    return (user === null || user === void 0 ? void 0 : user.role) === 'admin';\n  };\n\n  // Check if user has specific role\n  const hasRole = role => {\n    return (user === null || user === void 0 ? void 0 : user.role) === role;\n  };\n\n  // Get user permissions\n  const getPermissions = () => {\n    if (!user) return [];\n\n    // Admin has all permissions\n    if (user.role === 'admin') {\n      return ['all'];\n    }\n\n    // Other roles have limited permissions\n    return [user.role];\n  };\n\n  // Check if user has permission\n  const hasPermission = permission => {\n    const permissions = getPermissions();\n    return permissions.includes('all') || permissions.includes(permission);\n  };\n\n  // Clear error\n  const clearError = () => {\n    setError(null);\n  };\n\n  // Context value\n  const value = {\n    // State\n    user,\n    loading,\n    error,\n    // Actions\n    login,\n    logout,\n    updateProfile,\n    changePassword,\n    clearError,\n    // Helpers\n    isAuthenticated,\n    isAdmin,\n    hasRole,\n    hasPermission,\n    getPermissions,\n    // Utils\n    clearAuth\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","ApiService","STORAGE_KEYS","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","getErrorMessage","error","message","detail","AuthProvider","children","_s2","user","setUser","loading","setLoading","setError","initializeAuth","token","localStorage","getItem","AUTH_TOKEN","storedUser","USER_DATA","userData","JSON","parse","profile","getProfile","setItem","stringify","console","clearAuth","login","credentials","loginData","phone","username","password","log","response","access_token","role","success","apiError","mockUser","id","first_name","last_name","is_active","created_at","Date","toISOString","errorMessage","includes","logout","window","location","href","removeItem","updateProfile","profileData","updatedUser","changePassword","passwordData","isAuthenticated","isAdmin","hasRole","getPermissions","hasPermission","permission","permissions","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/abdulazim/Documents/web_stuff/real-projects/toshmi-admin/src/hooks/useAuth.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport ApiService from '../services/api';\nimport { STORAGE_KEYS } from '../utils/constants';\n\n// Create Auth Context\nconst AuthContext = createContext();\n\n// Custom hook to use auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Helper function to extract error message\nconst getErrorMessage = (error) => {\n  if (typeof error === 'string') return error;\n  if (error?.message) return error.message;\n  if (error?.detail) return error.detail;\n  if (error?.error) return error.error;\n  if (typeof error === 'object') {\n    return 'Kutilmagan xatolik yuz berdi';\n  }\n  return 'Noma\\'lum xatolik';\n};\n\n// Auth Provider Component\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Initialize authentication on app start\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const token = localStorage.getItem(STORAGE_KEYS.AUTH_TOKEN);\n        const storedUser = localStorage.getItem(STORAGE_KEYS.USER_DATA);\n\n        if (token && storedUser) {\n          try {\n            // Parse stored user\n            const userData = JSON.parse(storedUser);\n            setUser(userData);\n            \n            // If it's a mock token, just use stored data\n            if (token === 'mock-jwt-token') {\n              return;\n            }\n            \n            // Otherwise verify token is still valid by fetching fresh profile\n            const profile = await ApiService.getProfile();\n            setUser(profile);\n            localStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(profile));\n          } catch (error) {\n            console.error('Token verification failed:', error);\n            // Token is invalid, clear auth\n            clearAuth();\n          }\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        clearAuth();\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  // Login function\n  const login = async (credentials) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Format credentials for API\n      const loginData = {\n        phone: credentials.phone || credentials.username,\n        password: credentials.password\n      };\n\n      console.log('Attempting login with:', { phone: loginData.phone });\n\n      // Try real API login first\n      try {\n        const response = await ApiService.login(loginData);\n        \n        if (response && response.access_token && response.user) {\n          const { access_token: token, user: userData } = response;\n          \n          // Validate user is admin\n          if (userData.role !== 'admin') {\n            throw new Error('Faqat admin foydalanuvchilari tizimga kira oladi');\n          }\n          \n          // Store auth data\n          localStorage.setItem(STORAGE_KEYS.AUTH_TOKEN, token);\n          localStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(userData));\n          \n          setUser(userData);\n          \n          return { success: true, user: userData };\n        } else {\n          throw new Error('Serverdan noto\\'g\\'ri javob olindi');\n        }\n      } catch (apiError) {\n        console.log('API login failed, trying mock login:', apiError);\n        \n        // Fallback to mock login for testing\n        if (loginData.phone === '+998990330919' || loginData.phone === '998990330919' || loginData.phone === '990330919') {\n          if (credentials.password === 'admin123') {\n            // Mock successful login for testing\n            const mockUser = {\n              id: 1,\n              phone: '+998990330919',\n              role: 'admin',\n              first_name: 'Administrator',\n              last_name: 'System',\n              is_active: true,\n              created_at: new Date().toISOString()\n            };\n            \n            // Store mock auth data\n            localStorage.setItem(STORAGE_KEYS.AUTH_TOKEN, 'mock-jwt-token');\n            localStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(mockUser));\n            \n            setUser(mockUser);\n            \n            return { success: true, user: mockUser };\n          } else {\n            throw new Error('Noto\\'g\\'ri parol. Test uchun: admin123');\n          }\n        }\n        \n        // If mock also fails, throw original API error\n        throw apiError;\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      \n      let errorMessage = getErrorMessage(error);\n      \n      // Handle specific error cases\n      if (errorMessage.includes('401') || errorMessage.includes('Unauthorized')) {\n        errorMessage = 'Noto\\'g\\'ri telefon raqami yoki parol';\n      } else if (errorMessage.includes('403') || errorMessage.includes('Forbidden')) {\n        errorMessage = 'Sizga tizimga kirish huquqi berilmagan';\n      } else if (errorMessage.includes('404') || errorMessage.includes('Not Found')) {\n        errorMessage = 'Foydalanuvchi topilmadi';\n      } else if (errorMessage.includes('Network') || errorMessage.includes('fetch')) {\n        errorMessage = 'Serverga ulanishda xatolik. Internet aloqangizni tekshiring';\n      } else if (errorMessage.includes('500') || errorMessage.includes('Internal Server Error')) {\n        errorMessage = 'Server xatoligi yuz berdi. Keyinroq qayta urinib ko\\'ring';\n      }\n      \n      setError(errorMessage);\n      return { \n        success: false, \n        error: errorMessage \n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    clearAuth();\n    window.location.href = '/login';\n  };\n\n  // Clear authentication data\n  const clearAuth = () => {\n    localStorage.removeItem(STORAGE_KEYS.AUTH_TOKEN);\n    localStorage.removeItem(STORAGE_KEYS.USER_DATA);\n    setUser(null);\n    setError(null);\n  };\n\n  // Update profile\n  const updateProfile = async (profileData) => {\n    try {\n      const updatedUser = await ApiService.updateProfile(profileData);\n      setUser(updatedUser);\n      localStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(updatedUser));\n      return { success: true, user: updatedUser };\n    } catch (error) {\n      console.error('Profile update error:', error);\n      const errorMessage = getErrorMessage(error);\n      return { \n        success: false, \n        error: errorMessage\n      };\n    }\n  };\n\n  // Change password\n  const changePassword = async (passwordData) => {\n    try {\n      await ApiService.changePassword(passwordData);\n      return { success: true };\n    } catch (error) {\n      console.error('Password change error:', error);\n      const errorMessage = getErrorMessage(error);\n      return { \n        success: false, \n        error: errorMessage\n      };\n    }\n  };\n\n  // Check if user is authenticated\n  const isAuthenticated = () => {\n    return !!user && !!localStorage.getItem(STORAGE_KEYS.AUTH_TOKEN);\n  };\n\n  // Check if user is admin\n  const isAdmin = () => {\n    return user?.role === 'admin';\n  };\n\n  // Check if user has specific role\n  const hasRole = (role) => {\n    return user?.role === role;\n  };\n\n  // Get user permissions\n  const getPermissions = () => {\n    if (!user) return [];\n    \n    // Admin has all permissions\n    if (user.role === 'admin') {\n      return ['all'];\n    }\n    \n    // Other roles have limited permissions\n    return [user.role];\n  };\n\n  // Check if user has permission\n  const hasPermission = (permission) => {\n    const permissions = getPermissions();\n    return permissions.includes('all') || permissions.includes(permission);\n  };\n\n  // Clear error\n  const clearError = () => {\n    setError(null);\n  };\n\n  // Context value\n  const value = {\n    // State\n    user,\n    loading,\n    error,\n    \n    // Actions\n    login,\n    logout,\n    updateProfile,\n    changePassword,\n    clearError,\n    \n    // Helpers\n    isAuthenticated,\n    isAdmin,\n    hasRole,\n    hasPermission,\n    getPermissions,\n    \n    // Utils\n    clearAuth\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}