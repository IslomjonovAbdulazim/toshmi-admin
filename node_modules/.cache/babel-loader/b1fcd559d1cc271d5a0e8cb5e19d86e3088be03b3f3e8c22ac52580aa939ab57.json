{"ast":null,"code":"var _jsxFileName = \"/Users/abdulazim/Documents/web_stuff/real-projects/toshmi-admin/src/hooks/useAuth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport ApiService from '../services/api';\nimport { STORAGE_KEYS } from '../utils/constants';\n\n// Create Auth Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use auth context\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Auth Provider Component\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Initialize authentication on app start\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n        const storedUser = localStorage.getItem(STORAGE_KEYS.USER);\n        if (token && storedUser) {\n          try {\n            // Parse stored user\n            const userData = JSON.parse(storedUser);\n            setUser(userData);\n\n            // If it's a mock token, just use stored data\n            if (token === 'mock-jwt-token') {\n              return;\n            }\n\n            // Otherwise verify token is still valid by fetching fresh profile\n            const profile = await ApiService.getProfile();\n            setUser(profile);\n            localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(profile));\n          } catch (error) {\n            console.error('Token verification failed:', error);\n            // Token is invalid, clear auth\n            clearAuth();\n          }\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        clearAuth();\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n\n  // Login function\n  const login = async credentials => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Check if we already have mock auth (for testing)\n      const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n      const storedUser = localStorage.getItem(STORAGE_KEYS.USER);\n      if (token === 'mock-jwt-token' && storedUser) {\n        setUser(JSON.parse(storedUser));\n        return {\n          success: true\n        };\n      }\n\n      // Try real API login\n      const response = await ApiService.login(credentials);\n      if (response.access_token && response.user) {\n        const {\n          access_token: token,\n          user: userData\n        } = response;\n\n        // Store auth data\n        localStorage.setItem(STORAGE_KEYS.TOKEN, token);\n        localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(userData));\n        setUser(userData);\n        return {\n          success: true,\n          user: userData\n        };\n      } else {\n        throw new Error('Invalid response format from server');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      const errorMessage = error.message || 'Kirishda xatolik yuz berdi';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    clearAuth();\n    window.location.href = '/login';\n  };\n\n  // Clear authentication data\n  const clearAuth = () => {\n    localStorage.removeItem(STORAGE_KEYS.TOKEN);\n    localStorage.removeItem(STORAGE_KEYS.USER);\n    setUser(null);\n    setError(null);\n  };\n\n  // Update profile\n  const updateProfile = async profileData => {\n    try {\n      const updatedUser = await ApiService.updateProfile(profileData);\n      setUser(updatedUser);\n      localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(updatedUser));\n      return {\n        success: true,\n        user: updatedUser\n      };\n    } catch (error) {\n      console.error('Profile update error:', error);\n      return {\n        success: false,\n        error: error.message || 'Profilni yangilashda xatolik yuz berdi'\n      };\n    }\n  };\n\n  // Change password\n  const changePassword = async passwordData => {\n    try {\n      await ApiService.changePassword(passwordData);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Password change error:', error);\n      return {\n        success: false,\n        error: error.message || 'Parolni o\\'zgartirishda xatolik yuz berdi'\n      };\n    }\n  };\n\n  // Check if user is authenticated\n  const isAuthenticated = () => {\n    return !!user && !!localStorage.getItem(STORAGE_KEYS.TOKEN);\n  };\n\n  // Check if user is admin\n  const isAdmin = () => {\n    return (user === null || user === void 0 ? void 0 : user.role) === 'admin';\n  };\n\n  // Check if user has specific role\n  const hasRole = role => {\n    return (user === null || user === void 0 ? void 0 : user.role) === role;\n  };\n\n  // Get user permissions\n  const getPermissions = () => {\n    if (!user) return [];\n\n    // Admin has all permissions\n    if (user.role === 'admin') {\n      return ['all'];\n    }\n\n    // Other roles have limited permissions\n    return [user.role];\n  };\n\n  // Check if user has permission\n  const hasPermission = permission => {\n    const permissions = getPermissions();\n    return permissions.includes('all') || permissions.includes(permission);\n  };\n\n  // Refresh token (optional implementation)\n  const refreshToken = async () => {\n    try {\n      // If your backend supports token refresh, implement here\n      // For now, we'll just verify current token\n      const profile = await ApiService.getProfile();\n      setUser(profile);\n      localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(profile));\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n      clearAuth();\n      return {\n        success: false\n      };\n    }\n  };\n\n  // Context value\n  const value = {\n    // State\n    user,\n    loading,\n    error,\n    // Actions\n    login,\n    logout,\n    updateProfile,\n    changePassword,\n    refreshToken,\n    // Helpers\n    isAuthenticated,\n    isAdmin,\n    hasRole,\n    hasPermission,\n    getPermissions,\n    // Utils\n    clearAuth\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","ApiService","STORAGE_KEYS","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","initializeAuth","token","localStorage","getItem","TOKEN","storedUser","USER","userData","JSON","parse","profile","getProfile","setItem","stringify","console","clearAuth","login","credentials","success","response","access_token","errorMessage","message","logout","window","location","href","removeItem","updateProfile","profileData","updatedUser","changePassword","passwordData","isAuthenticated","isAdmin","role","hasRole","getPermissions","hasPermission","permission","permissions","includes","refreshToken","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/abdulazim/Documents/web_stuff/real-projects/toshmi-admin/src/hooks/useAuth.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport ApiService from '../services/api';\nimport { STORAGE_KEYS } from '../utils/constants';\n\n// Create Auth Context\nconst AuthContext = createContext();\n\n// Custom hook to use auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Auth Provider Component\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Initialize authentication on app start\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n        const storedUser = localStorage.getItem(STORAGE_KEYS.USER);\n\n        if (token && storedUser) {\n          try {\n            // Parse stored user\n            const userData = JSON.parse(storedUser);\n            setUser(userData);\n            \n            // If it's a mock token, just use stored data\n            if (token === 'mock-jwt-token') {\n              return;\n            }\n            \n            // Otherwise verify token is still valid by fetching fresh profile\n            const profile = await ApiService.getProfile();\n            setUser(profile);\n            localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(profile));\n          } catch (error) {\n            console.error('Token verification failed:', error);\n            // Token is invalid, clear auth\n            clearAuth();\n          }\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        clearAuth();\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  // Login function\n  const login = async (credentials) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Check if we already have mock auth (for testing)\n      const token = localStorage.getItem(STORAGE_KEYS.TOKEN);\n      const storedUser = localStorage.getItem(STORAGE_KEYS.USER);\n      \n      if (token === 'mock-jwt-token' && storedUser) {\n        setUser(JSON.parse(storedUser));\n        return { success: true };\n      }\n\n      // Try real API login\n      const response = await ApiService.login(credentials);\n      \n      if (response.access_token && response.user) {\n        const { access_token: token, user: userData } = response;\n        \n        // Store auth data\n        localStorage.setItem(STORAGE_KEYS.TOKEN, token);\n        localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(userData));\n        \n        setUser(userData);\n        \n        return { success: true, user: userData };\n      } else {\n        throw new Error('Invalid response format from server');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      const errorMessage = error.message || 'Kirishda xatolik yuz berdi';\n      setError(errorMessage);\n      return { \n        success: false, \n        error: errorMessage \n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    clearAuth();\n    window.location.href = '/login';\n  };\n\n  // Clear authentication data\n  const clearAuth = () => {\n    localStorage.removeItem(STORAGE_KEYS.TOKEN);\n    localStorage.removeItem(STORAGE_KEYS.USER);\n    setUser(null);\n    setError(null);\n  };\n\n  // Update profile\n  const updateProfile = async (profileData) => {\n    try {\n      const updatedUser = await ApiService.updateProfile(profileData);\n      setUser(updatedUser);\n      localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(updatedUser));\n      return { success: true, user: updatedUser };\n    } catch (error) {\n      console.error('Profile update error:', error);\n      return { \n        success: false, \n        error: error.message || 'Profilni yangilashda xatolik yuz berdi' \n      };\n    }\n  };\n\n  // Change password\n  const changePassword = async (passwordData) => {\n    try {\n      await ApiService.changePassword(passwordData);\n      return { success: true };\n    } catch (error) {\n      console.error('Password change error:', error);\n      return { \n        success: false, \n        error: error.message || 'Parolni o\\'zgartirishda xatolik yuz berdi' \n      };\n    }\n  };\n\n  // Check if user is authenticated\n  const isAuthenticated = () => {\n    return !!user && !!localStorage.getItem(STORAGE_KEYS.TOKEN);\n  };\n\n  // Check if user is admin\n  const isAdmin = () => {\n    return user?.role === 'admin';\n  };\n\n  // Check if user has specific role\n  const hasRole = (role) => {\n    return user?.role === role;\n  };\n\n  // Get user permissions\n  const getPermissions = () => {\n    if (!user) return [];\n    \n    // Admin has all permissions\n    if (user.role === 'admin') {\n      return ['all'];\n    }\n    \n    // Other roles have limited permissions\n    return [user.role];\n  };\n\n  // Check if user has permission\n  const hasPermission = (permission) => {\n    const permissions = getPermissions();\n    return permissions.includes('all') || permissions.includes(permission);\n  };\n\n  // Refresh token (optional implementation)\n  const refreshToken = async () => {\n    try {\n      // If your backend supports token refresh, implement here\n      // For now, we'll just verify current token\n      const profile = await ApiService.getProfile();\n      setUser(profile);\n      localStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(profile));\n      return { success: true };\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n      clearAuth();\n      return { success: false };\n    }\n  };\n\n  // Context value\n  const value = {\n    // State\n    user,\n    loading,\n    error,\n    \n    // Actions\n    login,\n    logout,\n    updateProfile,\n    changePassword,\n    refreshToken,\n    \n    // Helpers\n    isAuthenticated,\n    isAdmin,\n    hasRole,\n    hasPermission,\n    getPermissions,\n    \n    // Utils\n    clearAuth\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}