{"ast":null,"code":"import{API_BASE_URL}from'../utils/constants';class ActivityService{constructor(){this.socket=null;this.listeners={students:[],teachers:[],parents:[]};this.reconnectInterval=null;this.maxReconnectAttempts=10;this.reconnectAttempts=0;this.connectionStatus='disconnected';this.heartbeatInterval=null;this.lastDataReceived=null;this.cachedData={all:[],students:[],teachers:[],parents:[]};}getWebSocketUrl(){const wsUrl=API_BASE_URL.replace('https://','wss://').replace('http://','ws://');return\"\".concat(wsUrl,\"/ws/activity\");}connect(channel,onMessage){let onError=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;let onOpen=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;let onClose=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;// If already connected, just add listener for this channel\nif(this.socket&&this.socket.readyState===WebSocket.OPEN){this.addListener(channel,onMessage);if(onOpen)onOpen();// Send cached data if available\nif(this.cachedData[channel].length>0){onMessage({type:\"\".concat(channel.slice(0,-1),\"_activity_update\"),data:this.cachedData[channel]});}return this.socket;}// If connecting, just add listener\nif(this.connectionStatus==='connecting'){this.addListener(channel,onMessage);return this.socket;}// Close existing connection if any\nif(this.socket){this.disconnect();}this.connectionStatus='connecting';const wsUrl=this.getWebSocketUrl();try{const socket=new WebSocket(wsUrl);socket.onopen=event=>{this.connectionStatus='connected';this.reconnectAttempts=0;this.lastDataReceived=Date.now();this.startHeartbeat();// Add the listener for this channel\nthis.addListener(channel,onMessage);if(onOpen)onOpen(event);};socket.onmessage=event=>{try{const data=JSON.parse(event.data);this.lastDataReceived=Date.now();if(data.type==='pong'){return;}// Cache all activity data (no role filtering since role field not in response)\nif(data.data&&Array.isArray(data.data)){// Store all data - we'll filter on frontend based on user IDs\nthis.cachedData.all=data.data;// For backward compatibility, notify all channel listeners with same data\n['students','teachers','parents'].forEach(channel=>{this.listeners[channel].forEach(listener=>{try{listener({type:\"\".concat(channel.slice(0,-1),\"_activity_update\"),data:data.data,timestamp:data.timestamp,total_records:data.total_records});}catch(err){console.error(\"\\u274C Error in \".concat(channel,\" listener:\"),err);}});});}else{console.warn('⚠️ Received data but no data.data array:',data);}}catch(err){console.error(\"\\u274C Error parsing message:\",err,event.data);}};socket.onerror=error=>{console.error(\"\\u274C WebSocket error:\",error);this.connectionStatus='error';if(onError)onError(error);};socket.onclose=event=>{this.connectionStatus='disconnected';this.socket=null;this.stopHeartbeat();if(onClose)onClose(event);// Auto-reconnect for unexpected closures\nif(event.code!==1000&&this.reconnectAttempts<this.maxReconnectAttempts){this.scheduleReconnect(channel,onMessage,onError,onOpen,onClose);}else if(this.reconnectAttempts>=this.maxReconnectAttempts){this.connectionStatus='failed';}};this.socket=socket;return socket;}catch(err){this.connectionStatus='error';if(onError)onError(err);return null;}}startHeartbeat(){this.stopHeartbeat();this.heartbeatInterval=setInterval(()=>{var _this$socket;if(((_this$socket=this.socket)===null||_this$socket===void 0?void 0:_this$socket.readyState)===WebSocket.OPEN){this.socket.send(JSON.stringify({type:'ping'}));// Check if we haven't received data in a while\nconst timeSinceLastData=Date.now()-this.lastDataReceived;if(timeSinceLastData>90000){// 1.5 minutes\n}}},30000);// Send heartbeat every 30 seconds\n}stopHeartbeat(){if(this.heartbeatInterval){clearInterval(this.heartbeatInterval);this.heartbeatInterval=null;}}scheduleReconnect(channel,onMessage,onError,onOpen,onClose){if(this.reconnectInterval){clearTimeout(this.reconnectInterval);}const delay=Math.min(1000*Math.pow(2,this.reconnectAttempts),30000);this.reconnectAttempts++;this.connectionStatus='reconnecting';this.reconnectInterval=setTimeout(()=>{this.connect(channel,onMessage,onError,onOpen,onClose);},delay);}disconnect(){let channel=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(channel){this.listeners[channel]=[];this.cachedData[channel]=[];// Only disconnect socket if no other channels have listeners\nconst hasOtherListeners=Object.values(this.listeners).some(listeners=>listeners.length>0);if(!hasOtherListeners&&this.socket){this._disconnectSocket();}}else{this._disconnectSocket();}}_disconnectSocket(){if(this.socket){this.socket.close(1000,'Manual disconnect');this.socket=null;}this.stopHeartbeat();if(this.reconnectInterval){clearTimeout(this.reconnectInterval);this.reconnectInterval=null;}this.reconnectAttempts=0;this.connectionStatus='disconnected';this.lastDataReceived=null;// Clear all listeners and cached data\nObject.keys(this.listeners).forEach(key=>{this.listeners[key]=[];this.cachedData[key]=[];});}addListener(channel,callback){if(!this.listeners[channel].includes(callback)){this.listeners[channel].push(callback);}}removeListener(channel,callback){const index=this.listeners[channel].indexOf(callback);if(index>-1){this.listeners[channel].splice(index,1);}}isConnected(){var _this$socket2;let channel=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;return((_this$socket2=this.socket)===null||_this$socket2===void 0?void 0:_this$socket2.readyState)===WebSocket.OPEN;}getConnectionStatus(){let channel=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;return this.connectionStatus;}getLastDataTime(){let channel=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;return this.lastDataReceived;}getCachedData(channel){// Return all data since we don't have role filtering from backend\nreturn this.cachedData.all||[];}disconnectAll(){this._disconnectSocket();}getUserActivityStatus(lastActive){if(!lastActive){return{isOnline:false,statusText:'Ma\\'lumot topilmadi'};}const now=new Date();// Parse lastActive as UTC timestamp (backend sends UTC time without 'Z')\n// The database timestamp is in UTC but doesn't have 'Z', so we add it\nconst lastActiveUTC=lastActive.endsWith('Z')?lastActive:lastActive+'Z';const lastActiveDate=new Date(lastActiveUTC);const diffInSeconds=Math.floor((now-lastActiveDate)/1000);// Online if active within 10 seconds\nif(diffInSeconds<=10){return{isOnline:true,statusText:'Onlayn'};}// If within 24 hours, show hours and minutes (or minutes and seconds)\nconst diffInHours=Math.floor(diffInSeconds/3600);if(diffInHours<24){const hours=Math.floor(diffInSeconds/3600);const minutes=Math.floor(diffInSeconds%3600/60);const seconds=diffInSeconds%60;let timeText='';// If less than 1 hour, show minutes and seconds\nif(hours===0){if(minutes>0){timeText+=\"\".concat(minutes,\" daqiqa \");}if(seconds>0||minutes===0){timeText+=\"\".concat(seconds,\" sekund \");}}else{// If 1+ hours, show hours and minutes\ntimeText+=\"\".concat(hours,\" soat \");if(minutes>0){timeText+=\"\".concat(minutes,\" daqiqa \");}}return{isOnline:false,statusText:\"\".concat(timeText.trim(),\" oldin\")};}// More than 24 hours, show date and time in local time\nconst options={year:'numeric',month:'2-digit',day:'2-digit',hour:'2-digit',minute:'2-digit',hour12:false};const dateTimeString=lastActiveDate.toLocaleString('en-GB',options);return{isOnline:false,statusText:\"\".concat(dateTimeString)};}}export const activityService=new ActivityService();","map":{"version":3,"names":["API_BASE_URL","ActivityService","constructor","socket","listeners","students","teachers","parents","reconnectInterval","maxReconnectAttempts","reconnectAttempts","connectionStatus","heartbeatInterval","lastDataReceived","cachedData","all","getWebSocketUrl","wsUrl","replace","concat","connect","channel","onMessage","onError","arguments","length","undefined","onOpen","onClose","readyState","WebSocket","OPEN","addListener","type","slice","data","disconnect","onopen","event","Date","now","startHeartbeat","onmessage","JSON","parse","Array","isArray","forEach","listener","timestamp","total_records","err","console","error","warn","onerror","onclose","stopHeartbeat","code","scheduleReconnect","setInterval","_this$socket","send","stringify","timeSinceLastData","clearInterval","clearTimeout","delay","Math","min","pow","setTimeout","hasOtherListeners","Object","values","some","_disconnectSocket","close","keys","key","callback","includes","push","removeListener","index","indexOf","splice","isConnected","_this$socket2","getConnectionStatus","getLastDataTime","getCachedData","disconnectAll","getUserActivityStatus","lastActive","isOnline","statusText","lastActiveUTC","endsWith","lastActiveDate","diffInSeconds","floor","diffInHours","hours","minutes","seconds","timeText","trim","options","year","month","day","hour","minute","hour12","dateTimeString","toLocaleString","activityService"],"sources":["/Users/abdulazim/Documents/web_stuff/real-projects/toshmi-admin/src/services/activityService.js"],"sourcesContent":["import { API_BASE_URL } from '../utils/constants';\n\nclass ActivityService {\n  constructor() {\n    this.socket = null;\n    this.listeners = {\n      students: [],\n      teachers: [],\n      parents: []\n    };\n    this.reconnectInterval = null;\n    this.maxReconnectAttempts = 10;\n    this.reconnectAttempts = 0;\n    this.connectionStatus = 'disconnected';\n    this.heartbeatInterval = null;\n    this.lastDataReceived = null;\n    this.cachedData = {\n      all: [],\n      students: [],\n      teachers: [],\n      parents: []\n    };\n  }\n\n  getWebSocketUrl() {\n    const wsUrl = API_BASE_URL.replace('https://', 'wss://').replace('http://', 'ws://');\n    return `${wsUrl}/ws/activity`;\n  }\n\n  connect(channel, onMessage, onError = null, onOpen = null, onClose = null) {\n    // If already connected, just add listener for this channel\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      this.addListener(channel, onMessage);\n      if (onOpen) onOpen();\n      // Send cached data if available\n      if (this.cachedData[channel].length > 0) {\n        onMessage({ type: `${channel.slice(0, -1)}_activity_update`, data: this.cachedData[channel] });\n      }\n      return this.socket;\n    }\n\n    // If connecting, just add listener\n    if (this.connectionStatus === 'connecting') {\n      this.addListener(channel, onMessage);\n      return this.socket;\n    }\n\n    // Close existing connection if any\n    if (this.socket) {\n      this.disconnect();\n    }\n\n    this.connectionStatus = 'connecting';\n    const wsUrl = this.getWebSocketUrl();\n    \n    try {\n      const socket = new WebSocket(wsUrl);\n      \n      socket.onopen = (event) => {\n        this.connectionStatus = 'connected';\n        this.reconnectAttempts = 0;\n        this.lastDataReceived = Date.now();\n        \n        this.startHeartbeat();\n        \n        // Add the listener for this channel\n        this.addListener(channel, onMessage);\n        \n        if (onOpen) onOpen(event);\n      };\n\n      socket.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          this.lastDataReceived = Date.now();\n          \n          if (data.type === 'pong') {\n            return;\n          }\n          \n          // Cache all activity data (no role filtering since role field not in response)\n          if (data.data && Array.isArray(data.data)) {\n            // Store all data - we'll filter on frontend based on user IDs\n            this.cachedData.all = data.data;\n            \n            // For backward compatibility, notify all channel listeners with same data\n            ['students', 'teachers', 'parents'].forEach(channel => {\n              this.listeners[channel].forEach(listener => {\n                try {\n                  listener({ \n                    type: `${channel.slice(0, -1)}_activity_update`, \n                    data: data.data,\n                    timestamp: data.timestamp,\n                    total_records: data.total_records\n                  });\n                } catch (err) {\n                  console.error(`❌ Error in ${channel} listener:`, err);\n                }\n              });\n            });\n          } else {\n            console.warn('⚠️ Received data but no data.data array:', data);\n          }\n        } catch (err) {\n          console.error(`❌ Error parsing message:`, err, event.data);\n        }\n      };\n\n      socket.onerror = (error) => {\n        console.error(`❌ WebSocket error:`, error);\n        this.connectionStatus = 'error';\n        if (onError) onError(error);\n      };\n\n      socket.onclose = (event) => {\n        this.connectionStatus = 'disconnected';\n        this.socket = null;\n        this.stopHeartbeat();\n        \n        if (onClose) onClose(event);\n        \n        // Auto-reconnect for unexpected closures\n        if (event.code !== 1000 && this.reconnectAttempts < this.maxReconnectAttempts) {\n          this.scheduleReconnect(channel, onMessage, onError, onOpen, onClose);\n        } else if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n              this.connectionStatus = 'failed';\n        }\n      };\n\n      this.socket = socket;\n      return socket;\n    } catch (err) {\n      this.connectionStatus = 'error';\n      if (onError) onError(err);\n      return null;\n    }\n  }\n\n  startHeartbeat() {\n    this.stopHeartbeat();\n    this.heartbeatInterval = setInterval(() => {\n      if (this.socket?.readyState === WebSocket.OPEN) {\n        this.socket.send(JSON.stringify({ type: 'ping' }));\n        \n        // Check if we haven't received data in a while\n        const timeSinceLastData = Date.now() - this.lastDataReceived;\n        if (timeSinceLastData > 90000) { // 1.5 minutes\n          }\n      }\n    }, 30000); // Send heartbeat every 30 seconds\n  }\n\n  stopHeartbeat() {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n      this.heartbeatInterval = null;\n    }\n  }\n\n  scheduleReconnect(channel, onMessage, onError, onOpen, onClose) {\n    if (this.reconnectInterval) {\n      clearTimeout(this.reconnectInterval);\n    }\n\n    const delay = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);\n    this.reconnectAttempts++;\n    this.connectionStatus = 'reconnecting';\n\n\n    this.reconnectInterval = setTimeout(() => {\n      this.connect(channel, onMessage, onError, onOpen, onClose);\n    }, delay);\n  }\n\n  disconnect(channel = null) {\n    if (channel) {\n      this.listeners[channel] = [];\n      this.cachedData[channel] = [];\n      \n      // Only disconnect socket if no other channels have listeners\n      const hasOtherListeners = Object.values(this.listeners).some(listeners => listeners.length > 0);\n      if (!hasOtherListeners && this.socket) {\n        this._disconnectSocket();\n      }\n    } else {\n      this._disconnectSocket();\n    }\n  }\n\n  _disconnectSocket() {\n    if (this.socket) {\n      this.socket.close(1000, 'Manual disconnect');\n      this.socket = null;\n    }\n    \n    this.stopHeartbeat();\n    \n    if (this.reconnectInterval) {\n      clearTimeout(this.reconnectInterval);\n      this.reconnectInterval = null;\n    }\n    \n    this.reconnectAttempts = 0;\n    this.connectionStatus = 'disconnected';\n    this.lastDataReceived = null;\n    \n    // Clear all listeners and cached data\n    Object.keys(this.listeners).forEach(key => {\n      this.listeners[key] = [];\n      this.cachedData[key] = [];\n    });\n  }\n\n  addListener(channel, callback) {\n    if (!this.listeners[channel].includes(callback)) {\n      this.listeners[channel].push(callback);\n    }\n  }\n\n  removeListener(channel, callback) {\n    const index = this.listeners[channel].indexOf(callback);\n    if (index > -1) {\n      this.listeners[channel].splice(index, 1);\n    }\n  }\n\n  isConnected(channel = null) {\n    return this.socket?.readyState === WebSocket.OPEN;\n  }\n\n  getConnectionStatus(channel = null) {\n    return this.connectionStatus;\n  }\n\n  getLastDataTime(channel = null) {\n    return this.lastDataReceived;\n  }\n\n  getCachedData(channel) {\n    // Return all data since we don't have role filtering from backend\n    return this.cachedData.all || [];\n  }\n\n  disconnectAll() {\n    this._disconnectSocket();\n  }\n\n  getUserActivityStatus(lastActive) {\n    if (!lastActive) {\n      return { \n        isOnline: false, \n        statusText: 'Ma\\'lumot topilmadi' \n      };\n    }\n    \n    const now = new Date();\n    \n    // Parse lastActive as UTC timestamp (backend sends UTC time without 'Z')\n    // The database timestamp is in UTC but doesn't have 'Z', so we add it\n    const lastActiveUTC = lastActive.endsWith('Z') ? lastActive : lastActive + 'Z';\n    const lastActiveDate = new Date(lastActiveUTC);\n    \n    const diffInSeconds = Math.floor((now - lastActiveDate) / 1000);\n    \n    \n    // Online if active within 10 seconds\n    if (diffInSeconds <= 10) {\n      return { \n        isOnline: true, \n        statusText: 'Onlayn' \n      };\n    }\n    \n    // If within 24 hours, show hours and minutes (or minutes and seconds)\n    const diffInHours = Math.floor(diffInSeconds / 3600);\n    if (diffInHours < 24) {\n      const hours = Math.floor(diffInSeconds / 3600);\n      const minutes = Math.floor((diffInSeconds % 3600) / 60);\n      const seconds = diffInSeconds % 60;\n      \n      let timeText = '';\n      \n      // If less than 1 hour, show minutes and seconds\n      if (hours === 0) {\n        if (minutes > 0) {\n          timeText += `${minutes} daqiqa `;\n        }\n        if (seconds > 0 || minutes === 0) {\n          timeText += `${seconds} sekund `;\n        }\n      } else {\n        // If 1+ hours, show hours and minutes\n        timeText += `${hours} soat `;\n        if (minutes > 0) {\n          timeText += `${minutes} daqiqa `;\n        }\n      }\n      \n      return { \n        isOnline: false, \n        statusText: `${timeText.trim()} oldin` \n      };\n    }\n    \n    // More than 24 hours, show date and time in local time\n    const options = {\n      year: 'numeric',\n      month: '2-digit', \n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: false\n    };\n    \n    const dateTimeString = lastActiveDate.toLocaleString('en-GB', options);\n    \n    return { \n      isOnline: false, \n      statusText: `${dateTimeString}` \n    };\n  }\n}\n\nexport const activityService = new ActivityService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}