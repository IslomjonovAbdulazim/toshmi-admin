{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{activityService}from'../services/activityService';import{jsx as _jsx}from\"react/jsx-runtime\";const ActivityContext=/*#__PURE__*/createContext();export function ActivityProvider(_ref){let{children}=_ref;const[onlineCounts,setOnlineCounts]=useState({students:0,teachers:0,parents:0});// Update online counts whenever data changes\nconst updateOnlineCounts=()=>{const allData=activityService.getCachedData('all');const onlineUsers=allData.filter(item=>activityService.getUserActivityStatus(item.last_active).isOnline).length;// Since we don't have role separation, we'll show total online count for all channels\n// Individual pages will filter by their own user lists\nsetOnlineCounts({students:onlineUsers,teachers:onlineUsers,parents:onlineUsers});};const connect=channel=>{activityService.connect(channel,data=>{// Data is automatically cached in the service, just update counts\nupdateOnlineCounts();},error=>{},()=>{updateOnlineCounts();},()=>{});};const disconnect=channel=>{activityService.disconnect(channel);updateOnlineCounts();};const reconnect=channel=>{disconnect(channel);setTimeout(()=>connect(channel),1000);};const value={connect,disconnect,reconnect,isConnected:channel=>activityService.isConnected(channel),getConnectionStatus:channel=>activityService.getConnectionStatus(channel),getOnlineCount:channel=>onlineCounts[channel]||0,getData:channel=>activityService.getCachedData(channel)};return/*#__PURE__*/_jsx(ActivityContext.Provider,{value:value,children:children});}export function useActivity(){const context=useContext(ActivityContext);if(!context){throw new Error('useActivity must be used within an ActivityProvider');}return context;}","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","activityService","jsx","_jsx","ActivityContext","ActivityProvider","_ref","children","onlineCounts","setOnlineCounts","students","teachers","parents","updateOnlineCounts","allData","getCachedData","onlineUsers","filter","item","getUserActivityStatus","last_active","isOnline","length","connect","channel","data","error","disconnect","reconnect","setTimeout","value","isConnected","getConnectionStatus","getOnlineCount","getData","Provider","useActivity","context","Error"],"sources":["/Users/abdulazim/Documents/web_stuff/real-projects/toshmi-admin/src/contexts/ActivityContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { activityService } from '../services/activityService';\n\nconst ActivityContext = createContext();\n\nexport function ActivityProvider({ children }) {\n  const [onlineCounts, setOnlineCounts] = useState({\n    students: 0,\n    teachers: 0,\n    parents: 0\n  });\n\n  // Update online counts whenever data changes\n  const updateOnlineCounts = () => {\n    const allData = activityService.getCachedData('all');\n\n    const onlineUsers = allData.filter(item => \n      activityService.getUserActivityStatus(item.last_active).isOnline\n    ).length;\n\n    // Since we don't have role separation, we'll show total online count for all channels\n    // Individual pages will filter by their own user lists\n    setOnlineCounts({\n      students: onlineUsers,\n      teachers: onlineUsers,\n      parents: onlineUsers\n    });\n  };\n\n  const connect = (channel) => {\n    activityService.connect(\n      channel,\n      (data) => {\n        // Data is automatically cached in the service, just update counts\n        updateOnlineCounts();\n      },\n      (error) => {\n      },\n      () => {\n        updateOnlineCounts();\n      },\n      () => {\n      }\n    );\n  };\n\n  const disconnect = (channel) => {\n    activityService.disconnect(channel);\n    updateOnlineCounts();\n  };\n\n  const reconnect = (channel) => {\n    disconnect(channel);\n    setTimeout(() => connect(channel), 1000);\n  };\n\n  const value = {\n    connect,\n    disconnect,\n    reconnect,\n    isConnected: (channel) => activityService.isConnected(channel),\n    getConnectionStatus: (channel) => activityService.getConnectionStatus(channel),\n    getOnlineCount: (channel) => onlineCounts[channel] || 0,\n    getData: (channel) => activityService.getCachedData(channel)\n  };\n\n  return (\n    <ActivityContext.Provider value={value}>\n      {children}\n    </ActivityContext.Provider>\n  );\n}\n\nexport function useActivity() {\n  const context = useContext(ActivityContext);\n  if (!context) {\n    throw new Error('useActivity must be used within an ActivityProvider');\n  }\n  return context;\n}"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC7E,OAASC,eAAe,KAAQ,6BAA6B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE9D,KAAM,CAAAC,eAAe,cAAGP,aAAa,CAAC,CAAC,CAEvC,MAAO,SAAS,CAAAQ,gBAAgBA,CAAAC,IAAA,CAAe,IAAd,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC3C,KAAM,CAACE,YAAY,CAAEC,eAAe,CAAC,CAAGV,QAAQ,CAAC,CAC/CW,QAAQ,CAAE,CAAC,CACXC,QAAQ,CAAE,CAAC,CACXC,OAAO,CAAE,CACX,CAAC,CAAC,CAEF;AACA,KAAM,CAAAC,kBAAkB,CAAGA,CAAA,GAAM,CAC/B,KAAM,CAAAC,OAAO,CAAGb,eAAe,CAACc,aAAa,CAAC,KAAK,CAAC,CAEpD,KAAM,CAAAC,WAAW,CAAGF,OAAO,CAACG,MAAM,CAACC,IAAI,EACrCjB,eAAe,CAACkB,qBAAqB,CAACD,IAAI,CAACE,WAAW,CAAC,CAACC,QAC1D,CAAC,CAACC,MAAM,CAER;AACA;AACAb,eAAe,CAAC,CACdC,QAAQ,CAAEM,WAAW,CACrBL,QAAQ,CAAEK,WAAW,CACrBJ,OAAO,CAAEI,WACX,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAAO,OAAO,CAAIC,OAAO,EAAK,CAC3BvB,eAAe,CAACsB,OAAO,CACrBC,OAAO,CACNC,IAAI,EAAK,CACR;AACAZ,kBAAkB,CAAC,CAAC,CACtB,CAAC,CACAa,KAAK,EAAK,CACX,CAAC,CACD,IAAM,CACJb,kBAAkB,CAAC,CAAC,CACtB,CAAC,CACD,IAAM,CACN,CACF,CAAC,CACH,CAAC,CAED,KAAM,CAAAc,UAAU,CAAIH,OAAO,EAAK,CAC9BvB,eAAe,CAAC0B,UAAU,CAACH,OAAO,CAAC,CACnCX,kBAAkB,CAAC,CAAC,CACtB,CAAC,CAED,KAAM,CAAAe,SAAS,CAAIJ,OAAO,EAAK,CAC7BG,UAAU,CAACH,OAAO,CAAC,CACnBK,UAAU,CAAC,IAAMN,OAAO,CAACC,OAAO,CAAC,CAAE,IAAI,CAAC,CAC1C,CAAC,CAED,KAAM,CAAAM,KAAK,CAAG,CACZP,OAAO,CACPI,UAAU,CACVC,SAAS,CACTG,WAAW,CAAGP,OAAO,EAAKvB,eAAe,CAAC8B,WAAW,CAACP,OAAO,CAAC,CAC9DQ,mBAAmB,CAAGR,OAAO,EAAKvB,eAAe,CAAC+B,mBAAmB,CAACR,OAAO,CAAC,CAC9ES,cAAc,CAAGT,OAAO,EAAKhB,YAAY,CAACgB,OAAO,CAAC,EAAI,CAAC,CACvDU,OAAO,CAAGV,OAAO,EAAKvB,eAAe,CAACc,aAAa,CAACS,OAAO,CAC7D,CAAC,CAED,mBACErB,IAAA,CAACC,eAAe,CAAC+B,QAAQ,EAACL,KAAK,CAAEA,KAAM,CAAAvB,QAAA,CACpCA,QAAQ,CACe,CAAC,CAE/B,CAEA,MAAO,SAAS,CAAA6B,WAAWA,CAAA,CAAG,CAC5B,KAAM,CAAAC,OAAO,CAAGvC,UAAU,CAACM,eAAe,CAAC,CAC3C,GAAI,CAACiC,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,qDAAqD,CAAC,CACxE,CACA,MAAO,CAAAD,OAAO,CAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}