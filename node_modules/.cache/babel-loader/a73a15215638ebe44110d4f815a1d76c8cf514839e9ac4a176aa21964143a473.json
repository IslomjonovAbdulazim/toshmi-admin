{"ast":null,"code":"import _objectSpread from\"/Users/abdulazim/Documents/web_stuff/real-projects/toshmi-admin/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import api from'./api';export const paymentService={// Get all payments with filtering\ngetAllPayments:async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};console.log('Fetching payments with params:',params);try{const response=await api.get('/admin/payments',{params});console.log('Payments fetched successfully:',response.data);return response;}catch(error){console.error('Failed to fetch payments:',error);throw error;}},// Get specific payment\ngetPayment:async paymentId=>{try{return await api.get(\"/admin/payments/\".concat(paymentId));}catch(error){console.error('Failed to get payment:',error);throw error;}},// Record a new payment\nrecordPayment:async paymentData=>{console.log('Recording payment:',paymentData);try{const response=await api.post('/admin/payments',paymentData);console.log('Payment recorded successfully:',response.data);return response;}catch(error){console.error('Payment recording failed:',error);throw error;}},// Update existing payment\nupdatePayment:async(paymentId,paymentData)=>{console.log('Updating payment:',paymentId,paymentData);try{const response=await api.put(\"/admin/payments/\".concat(paymentId),paymentData);console.log('Payment updated successfully:',response.data);return response;}catch(error){console.error('Payment update failed:',error);throw error;}},// Delete payment\ndeletePayment:async paymentId=>{console.log('Deleting payment:',paymentId);try{const response=await api.delete(\"/admin/payments/\".concat(paymentId));console.log('Payment deleted successfully:',response.data);return response;}catch(error){console.error('Payment deletion failed:',error);throw error;}},// Get payment statistics (if backend supports it in the future)\ngetStats:async()=>{try{return await api.get('/admin/payment-stats');}catch(err){console.log('Payment stats endpoint not available');return{data:null};}},// Update monthly payment status (if needed)\nupdateMonthlyStatus:async(studentId,monthlyData)=>{return await api.put('/admin/monthly-payment-status',_objectSpread({student_id:studentId},monthlyData));}};","map":{"version":3,"names":["api","paymentService","getAllPayments","params","arguments","length","undefined","console","log","response","get","data","error","getPayment","paymentId","concat","recordPayment","paymentData","post","updatePayment","put","deletePayment","delete","getStats","err","updateMonthlyStatus","studentId","monthlyData","_objectSpread","student_id"],"sources":["/Users/abdulazim/Documents/web_stuff/real-projects/toshmi-admin/src/services/paymentService.js"],"sourcesContent":["import api from './api';\n\nexport const paymentService = {\n  // Get all payments with filtering\n  getAllPayments: async (params = {}) => {\n    console.log('Fetching payments with params:', params);\n    try {\n      const response = await api.get('/admin/payments', { params });\n      console.log('Payments fetched successfully:', response.data);\n      return response;\n    } catch (error) {\n      console.error('Failed to fetch payments:', error);\n      throw error;\n    }\n  },\n\n  // Get specific payment\n  getPayment: async (paymentId) => {\n    try {\n      return await api.get(`/admin/payments/${paymentId}`);\n    } catch (error) {\n      console.error('Failed to get payment:', error);\n      throw error;\n    }\n  },\n\n  // Record a new payment\n  recordPayment: async (paymentData) => {\n    console.log('Recording payment:', paymentData);\n    try {\n      const response = await api.post('/admin/payments', paymentData);\n      console.log('Payment recorded successfully:', response.data);\n      return response;\n    } catch (error) {\n      console.error('Payment recording failed:', error);\n      throw error;\n    }\n  },\n\n  // Update existing payment\n  updatePayment: async (paymentId, paymentData) => {\n    console.log('Updating payment:', paymentId, paymentData);\n    try {\n      const response = await api.put(`/admin/payments/${paymentId}`, paymentData);\n      console.log('Payment updated successfully:', response.data);\n      return response;\n    } catch (error) {\n      console.error('Payment update failed:', error);\n      throw error;\n    }\n  },\n\n  // Delete payment\n  deletePayment: async (paymentId) => {\n    console.log('Deleting payment:', paymentId);\n    try {\n      const response = await api.delete(`/admin/payments/${paymentId}`);\n      console.log('Payment deleted successfully:', response.data);\n      return response;\n    } catch (error) {\n      console.error('Payment deletion failed:', error);\n      throw error;\n    }\n  },\n\n  // Get payment statistics (if backend supports it in the future)\n  getStats: async () => {\n    try {\n      return await api.get('/admin/payment-stats');\n    } catch (err) {\n      console.log('Payment stats endpoint not available');\n      return { data: null };\n    }\n  },\n\n  // Update monthly payment status (if needed)\n  updateMonthlyStatus: async (studentId, monthlyData) => {\n    return await api.put('/admin/monthly-payment-status', {\n      student_id: studentId,\n      ...monthlyData\n    });\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}